//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace EldigmPlusApp.Mem_WsDevice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IWsDevice", Namespace="http://tempuri.org/")]
    public partial class WsDevice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback devTypeCmbOperationCompleted;
        
        private System.Threading.SendOrPostCallback devIOCmbOperationCompleted;
        
        private System.Threading.SendOrPostCallback sDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback mDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback aDeviceProOperationCompleted;
        
        private System.Threading.SendOrPostCallback logDeviceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WsDevice() {
            this.Url = global::EldigmPlusApp.Properties.Settings.Default.EldigmPlusApp_Mem_WsDevice_WsDevice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event devTypeCmbCompletedEventHandler devTypeCmbCompleted;
        
        /// <remarks/>
        public event devIOCmbCompletedEventHandler devIOCmbCompleted;
        
        /// <remarks/>
        public event sDeviceCompletedEventHandler sDeviceCompleted;
        
        /// <remarks/>
        public event mDeviceCompletedEventHandler mDeviceCompleted;
        
        /// <remarks/>
        public event aDeviceProCompletedEventHandler aDeviceProCompleted;
        
        /// <remarks/>
        public event logDeviceCompletedEventHandler logDeviceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWsDevice/devTypeCmb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string devTypeCmb([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/EldigmPlusSvc_Memco.WebSvc.Sys.Device")] out DataDevCombo[] reList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reMsg) {
            object[] results = this.Invoke("devTypeCmb", new object[0]);
            reList = ((DataDevCombo[])(results[1]));
            reMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void devTypeCmbAsync() {
            this.devTypeCmbAsync(null);
        }
        
        /// <remarks/>
        public void devTypeCmbAsync(object userState) {
            if ((this.devTypeCmbOperationCompleted == null)) {
                this.devTypeCmbOperationCompleted = new System.Threading.SendOrPostCallback(this.OndevTypeCmbOperationCompleted);
            }
            this.InvokeAsync("devTypeCmb", new object[0], this.devTypeCmbOperationCompleted, userState);
        }
        
        private void OndevTypeCmbOperationCompleted(object arg) {
            if ((this.devTypeCmbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.devTypeCmbCompleted(this, new devTypeCmbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWsDevice/devIOCmb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string devIOCmb([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/EldigmPlusSvc_Memco.WebSvc.Sys.Device")] out DataDevCombo[] reList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reMsg) {
            object[] results = this.Invoke("devIOCmb", new object[0]);
            reList = ((DataDevCombo[])(results[1]));
            reMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void devIOCmbAsync() {
            this.devIOCmbAsync(null);
        }
        
        /// <remarks/>
        public void devIOCmbAsync(object userState) {
            if ((this.devIOCmbOperationCompleted == null)) {
                this.devIOCmbOperationCompleted = new System.Threading.SendOrPostCallback(this.OndevIOCmbOperationCompleted);
            }
            this.InvokeAsync("devIOCmb", new object[0], this.devIOCmbOperationCompleted, userState);
        }
        
        private void OndevIOCmbOperationCompleted(object arg) {
            if ((this.devIOCmbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.devIOCmbCompleted(this, new devIOCmbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWsDevice/sDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string sDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDbNm, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pSiteCd, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/EldigmPlusSvc_Memco.WebSvc.Sys.Device")] out DataDevice[] reList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reMsg) {
            object[] results = this.Invoke("sDevice", new object[] {
                        pDbNm,
                        pSiteCd});
            reList = ((DataDevice[])(results[1]));
            reMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sDeviceAsync(string pDbNm, string pSiteCd) {
            this.sDeviceAsync(pDbNm, pSiteCd, null);
        }
        
        /// <remarks/>
        public void sDeviceAsync(string pDbNm, string pSiteCd, object userState) {
            if ((this.sDeviceOperationCompleted == null)) {
                this.sDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsDeviceOperationCompleted);
            }
            this.InvokeAsync("sDevice", new object[] {
                        pDbNm,
                        pSiteCd}, this.sDeviceOperationCompleted, userState);
        }
        
        private void OnsDeviceOperationCompleted(object arg) {
            if ((this.sDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sDeviceCompleted(this, new sDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWsDevice/mDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string mDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDbNm, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pSiteCd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevCd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDeviceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevTypeScd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevIOScd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevNm, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pIp, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pSortNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pUsingFalg, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pMemo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reMsg, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reData) {
            object[] results = this.Invoke("mDevice", new object[] {
                        pDbNm,
                        pSiteCd,
                        pDevCd,
                        pDeviceId,
                        pDevTypeScd,
                        pDevIOScd,
                        pDevNm,
                        pIp,
                        pSortNo,
                        pUsingFalg,
                        pMemo});
            reMsg = ((string)(results[1]));
            reData = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void mDeviceAsync(string pDbNm, string pSiteCd, string pDevCd, string pDeviceId, string pDevTypeScd, string pDevIOScd, string pDevNm, string pIp, string pSortNo, string pUsingFalg, string pMemo) {
            this.mDeviceAsync(pDbNm, pSiteCd, pDevCd, pDeviceId, pDevTypeScd, pDevIOScd, pDevNm, pIp, pSortNo, pUsingFalg, pMemo, null);
        }
        
        /// <remarks/>
        public void mDeviceAsync(string pDbNm, string pSiteCd, string pDevCd, string pDeviceId, string pDevTypeScd, string pDevIOScd, string pDevNm, string pIp, string pSortNo, string pUsingFalg, string pMemo, object userState) {
            if ((this.mDeviceOperationCompleted == null)) {
                this.mDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmDeviceOperationCompleted);
            }
            this.InvokeAsync("mDevice", new object[] {
                        pDbNm,
                        pSiteCd,
                        pDevCd,
                        pDeviceId,
                        pDevTypeScd,
                        pDevIOScd,
                        pDevNm,
                        pIp,
                        pSortNo,
                        pUsingFalg,
                        pMemo}, this.mDeviceOperationCompleted, userState);
        }
        
        private void OnmDeviceOperationCompleted(object arg) {
            if ((this.mDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.mDeviceCompleted(this, new mDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWsDevice/aDevicePro", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string aDevicePro([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDbNm, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] param, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reMsg, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reData) {
            object[] results = this.Invoke("aDevicePro", new object[] {
                        pDbNm,
                        param});
            reMsg = ((string)(results[1]));
            reData = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void aDeviceProAsync(string pDbNm, string[] param) {
            this.aDeviceProAsync(pDbNm, param, null);
        }
        
        /// <remarks/>
        public void aDeviceProAsync(string pDbNm, string[] param, object userState) {
            if ((this.aDeviceProOperationCompleted == null)) {
                this.aDeviceProOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaDeviceProOperationCompleted);
            }
            this.InvokeAsync("aDevicePro", new object[] {
                        pDbNm,
                        param}, this.aDeviceProOperationCompleted, userState);
        }
        
        private void OnaDeviceProOperationCompleted(object arg) {
            if ((this.aDeviceProCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.aDeviceProCompleted(this, new aDeviceProCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWsDevice/logDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string logDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDbNm, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevCd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pSiteCd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDeviceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevTypeScd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevIOScd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pDevNm, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pIp, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pUsingFalg, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pSortNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pMemo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pInputId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reMsg, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string reData) {
            object[] results = this.Invoke("logDevice", new object[] {
                        pDbNm,
                        pDevCd,
                        pSiteCd,
                        pDeviceId,
                        pDevTypeScd,
                        pDevIOScd,
                        pDevNm,
                        pIp,
                        pUsingFalg,
                        pSortNo,
                        pMemo,
                        pInputId});
            reMsg = ((string)(results[1]));
            reData = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void logDeviceAsync(string pDbNm, string pDevCd, string pSiteCd, string pDeviceId, string pDevTypeScd, string pDevIOScd, string pDevNm, string pIp, string pUsingFalg, string pSortNo, string pMemo, string pInputId) {
            this.logDeviceAsync(pDbNm, pDevCd, pSiteCd, pDeviceId, pDevTypeScd, pDevIOScd, pDevNm, pIp, pUsingFalg, pSortNo, pMemo, pInputId, null);
        }
        
        /// <remarks/>
        public void logDeviceAsync(string pDbNm, string pDevCd, string pSiteCd, string pDeviceId, string pDevTypeScd, string pDevIOScd, string pDevNm, string pIp, string pUsingFalg, string pSortNo, string pMemo, string pInputId, object userState) {
            if ((this.logDeviceOperationCompleted == null)) {
                this.logDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogDeviceOperationCompleted);
            }
            this.InvokeAsync("logDevice", new object[] {
                        pDbNm,
                        pDevCd,
                        pSiteCd,
                        pDeviceId,
                        pDevTypeScd,
                        pDevIOScd,
                        pDevNm,
                        pIp,
                        pUsingFalg,
                        pSortNo,
                        pMemo,
                        pInputId}, this.logDeviceOperationCompleted, userState);
        }
        
        private void OnlogDeviceOperationCompleted(object arg) {
            if ((this.logDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logDeviceCompleted(this, new logDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/EldigmPlusSvc_Memco.WebSvc.Sys.Device")]
    public partial class DataDevCombo {
        
        private string sCODEField;
        
        private string sCODE_NMField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SCODE {
            get {
                return this.sCODEField;
            }
            set {
                this.sCODEField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SCODE_NM {
            get {
                return this.sCODE_NMField;
            }
            set {
                this.sCODE_NMField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/EldigmPlusSvc_Memco.WebSvc.Sys.Device")]
    public partial class DataDevice {
        
        private int dEV_CDField;
        
        private bool dEV_CDFieldSpecified;
        
        private int dEVICE_IDField;
        
        private bool dEVICE_IDFieldSpecified;
        
        private string dEV_TYPE_SCDField;
        
        private string dEV_IO_SCDField;
        
        private string dEV_NMField;
        
        private string ipField;
        
        private int uSING_FLAGField;
        
        private bool uSING_FLAGFieldSpecified;
        
        private int sORT_NOField;
        
        private bool sORT_NOFieldSpecified;
        
        private string mEMOField;
        
        /// <remarks/>
        public int DEV_CD {
            get {
                return this.dEV_CDField;
            }
            set {
                this.dEV_CDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DEV_CDSpecified {
            get {
                return this.dEV_CDFieldSpecified;
            }
            set {
                this.dEV_CDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int DEVICE_ID {
            get {
                return this.dEVICE_IDField;
            }
            set {
                this.dEVICE_IDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DEVICE_IDSpecified {
            get {
                return this.dEVICE_IDFieldSpecified;
            }
            set {
                this.dEVICE_IDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DEV_TYPE_SCD {
            get {
                return this.dEV_TYPE_SCDField;
            }
            set {
                this.dEV_TYPE_SCDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DEV_IO_SCD {
            get {
                return this.dEV_IO_SCDField;
            }
            set {
                this.dEV_IO_SCDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DEV_NM {
            get {
                return this.dEV_NMField;
            }
            set {
                this.dEV_NMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string IP {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public int USING_FLAG {
            get {
                return this.uSING_FLAGField;
            }
            set {
                this.uSING_FLAGField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool USING_FLAGSpecified {
            get {
                return this.uSING_FLAGFieldSpecified;
            }
            set {
                this.uSING_FLAGFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int SORT_NO {
            get {
                return this.sORT_NOField;
            }
            set {
                this.sORT_NOField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SORT_NOSpecified {
            get {
                return this.sORT_NOFieldSpecified;
            }
            set {
                this.sORT_NOFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string MEMO {
            get {
                return this.mEMOField;
            }
            set {
                this.mEMOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void devTypeCmbCompletedEventHandler(object sender, devTypeCmbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class devTypeCmbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal devTypeCmbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public DataDevCombo[] reList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataDevCombo[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string reMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void devIOCmbCompletedEventHandler(object sender, devIOCmbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class devIOCmbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal devIOCmbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public DataDevCombo[] reList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataDevCombo[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string reMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sDeviceCompletedEventHandler(object sender, sDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public DataDevice[] reList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataDevice[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string reMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void mDeviceCompletedEventHandler(object sender, mDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class mDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal mDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string reMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string reData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void aDeviceProCompletedEventHandler(object sender, aDeviceProCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class aDeviceProCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal aDeviceProCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string reMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string reData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void logDeviceCompletedEventHandler(object sender, logDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string reMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string reData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591